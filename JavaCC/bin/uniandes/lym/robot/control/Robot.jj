*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi

Proyecto realizado por

Luisa Hernandez - 202114093 
Pablo Arango - 202220340
 **/


options 
{
  
	LOOKAHEAD=4; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;

	private HashMap<String, Integer> variables = new HashMap<String, Integer>();
	private HashMap<String, ArrayList> procedimientos = new HashMap<String, ArrayList>();
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	void Move(Integer n,String d) throws Exception
	{
	  if(d.equals("back"))
	  {
	    world.moveVertically(n, false);
	  }
	  else if (d.equals("front"))
	  {
	    world.moveVertically(-n, false);
	  }
	  else if (d.equals("left"))
	  {
	    world.moveHorizontally(-n, false);
	  }
	  else if (d.equals("right"))
	  {
	    world.moveHorizontally(n, false);
	  }
	  else
	  {
	    throw new Exception("No se encontro la direccion");
	  }
	}

	void Turn(String d)
	{
	 if (d.equals("around"))
	 {
	   if (world.facingNorth())
	   {
	     while (1 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else if (world.facingSouth())
	   {
	     while (0 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else if (world.facingEast())
	   {
	     while (3 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else
	   {
	     while (2 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	 }
	 else if (d.equals("right"))
	 {
	   world.turnRight();
	 }
	 else if (d.equals("left"))
	 {
	   if (world.facingNorth())
	   {
	     while (3 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else if (world.facingSouth())
	   {
	     while (2 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else if (world.facingEast())
	   {
	     while (0 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	   else
	   {
	     while (1 != world.getFacing())
	     {
	       world.turnRight();
	     }
	   }
	 }
   }
   
   void TurnTo(Integer o) throws Exception
	{
	  while (o != world.getFacing())
	  {
	    world.turnRight();
	  }
	}

	Boolean Can(String comando) throws Error
	{
	  Boolean resultado = true;
	  if (comando.equals("walk"))
	  {
	    try
	    {
	      world.moveForward(n, false);
	      world.moveForward(-n, false);
	    }
	    catch(Error e)
	    {
	      resultado = false;
	    }
	  }
	  else if(comando.equals("jump"))
	  {
	    try
	    {
	      world.moveForward(n, true);
	      world.moveForward(-n, true);
	    }
	    catch(Error e)
	    {
	      resultado = false;
	    }
	  }
	  else if(comando.equals("pop"))
	  {
	    try
	    {
	      world.popBalloons(n);
	      world.putBalloons(n);
	      Integer r = world.getMyBalloons() + 1;
	      world.restart(world.getPosition(), r, world.getMyChips(), false);
	    }
	    catch(Error e)
	    {
	      resultado = false;
	    }
	  }
	  else if (comando.equals("pick"))
	  {
		  try
		  {
		    world.pickChips(n);
		    world.putChips(n);
		  }
		  catch(Error e)
		  {
		    resultado = false;
		  }
	  }
	  else if (comando.equals("pick"))
	  {
	    try
	    {
	      world.grabBalloons(n);
	      world.putBalloons(n);
	    }
	    catch(Error e)
	    {
	      resultado = false;
	    }
	  }
	  else if (comando.equals("put"))
	  {
	    try
	    {
	      world.putChips(n);
	      world.pickChips(n);
	    }
	    catch(Error e)
	    {
	      resultado = false;
	    }
	  }
	  else
	  {
	    throw new Error ("El comando no existe!");
	  }
	  return resultado;
	}

	boolean Can(String d) throws Exception
	{
	  boolean resultado = true;
	  try
	  {
	    Point before = world.getPosition();
	    Walk(d, n);
	    world.restart(before, world.getMyBalloons(), world.getMyChips(), false);
	  }
	  catch(Error e)
	  {
	    resultado = false;
	  }
	  return resultado;
	}
	
	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Direcciones y estructuras */
{

 < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < RETIMES: "repeatTimes" >
| < FACING: "isFacing" >
| < CAN: "can" >
| < NOT: "not" >
| < NORTH: "north" >
| < SOUTH: "south" >
| < EAST: "east" >
| < WEST: "west" >
| < FRONT: "front" >
| < LEFT: "left" >
| < RIGHT: "right" >
| < BACK: "back">
| < AROUND: "around" >
		
}

TOKEN: /* Nombres de Comandos */
{

 < GO: "go" >
| < JUMP: "jump" >
		
}
TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		| < NAME: ["a"-"z"] (< DIGIT > | < LETTER >)* >
		|  	<#DIGIT: ["0"-"9"] >
		| < #LETTER: ["a"-"z"] | ["A"-"Z"]>
        
}

//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema) throws Exception:
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		< PROG > (var())+ (defProc())* block(true) < GORP > {salida = "Si sirve el programa"; }
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		}

    	| <EOF> {return false;} 
	}

void var():
{
  String nombreVariable = "";
}
{
  < VAR > (nombreVariable = name()
  {
    variables.put(nombreVariable, 0);
  }
  ("," nombreVariable = name()
  {
    variables.put(nombreVariable, 0);
  }
  )*)+ ";"
}

String name():
{
  String nombre;
}
{
  < NAME >
  {
    nombre = token.image;
    return nombre;
  }
}

void block(Boolean reproducir) throws Exception:
{}
{
  "{" (comando(reproducir) | controlEstructure(reproducir) )*  "}"
}

void defProc() throws Exception:
{
  String nombreProc;
  String nombrePara;
  ArrayList parametros = new ArrayList();
}
{
  < PROC > < NAME > {nombreProc = token.image; } "(" (< NAME > {parametros.add(token.image); variables.put(token.image, 0);} ("," < NAME > {parametros.add(token.image); variables.put(token.image, 0);})*)*  ")" block(false)
  < CORP > {procedimientos.put(nombreProc, parametros);}
}

void callProc():
{
  ArrayList parametros;
  Integer par1;
  Integer par2;
}
{
  parametros = paraProc() "(" (par1 = numOVar() ("," par2 = numOVar() )*)* ")" ";"
}


ArrayList paraProc():
{
  String nombreProc;
  ArrayList parametros = new ArrayList();
}
{
  nombreProc = name()
  {
    return procedimientos.get(nombreProc);
  }
}

void controlEstructure(Boolean reproducir) throws Exception:
{
  Boolean cumple;
  Integer n;
}
{
  < IF > "(" cumple = condicional() {if(!reproducir) {cumple = false; } } ")" block(cumple) (< ELSE > {if(!reproducir) {cumple = true; } } block(!cumple))* < FI >
| < WHILE > "(" cumple = condicional() ")" 
| < RETIMES > n = numOVar() block(false) 
}

Boolean condicional() throws Exception:
{
  Boolean resultado = true;
  Integer o;
  Integer n;
  String d;
  String comando;
  
}
{
  < FACING > "(" o = orientacion() ")" { resultado = (o.equals(world.getFacing())); return resultado;}
| < VALID > "("
	(< WALK >
	| < JUMP >
	| < POP >
	| < GET >
	| < GRAB >
	| <  DROP > ) { comando = token.image; } "," n = numOVar() ")" { resultado = isValid(comando, n); return resultado;}
| < CAN > "(" (d = direccion() "," n = numOVar() ")" {resultado = canD(d, n); return resultado;}| o = orientacion() "," n = numOVar() ")" {resultado = CanO(o, n); return resultado;} )  
| < NOT > "(" resultado = condicional() ")" {return !resultado; }
}

void comando(Boolean reproducir) throws Exception:
{}
{
  (
    assignment(reproducir)
| walk(reproducir)
| jump(reproducir)
| Leap(reproducir)
| TurnTo(reproducir)
| Turn(reproducir)
| drop(reproducir)
| grab(reproducir)
| get(reproducir)
| go(reproducir)) ";"
}

void go(Boolean reproducir) throws Exception:
{ 
Integer x, y;
}

{
	<GO> "(" x = numOVar() "," y = numOVar() ")" {if (reproducir) { world.setPostion(x, y); } }
}
void pop(Boolean reproducir) throws Exception:
{
  Integer n;
}

{
  < GET > "(" n = numOVar() ")" { if (reproducir) {world.pickChips(n); } }
}

void grab(Boolean reproducir) throws Exception:
{
  Integer n;
}
{
  < GRAB > "(" n = numOVar() ")" { if (reproducir) { world.grabBalloons(n); } }
}

void drop(Boolean reproducir):
{
  Integer n;
}
{
  < DROP > "(" n = numOVar() ")" { if (reproducir) { world.putChips(n);} }
}
void Turn(Boolean reproducir) throws Exception:
{
  Integer o;
}
{
  < TURN > "(" o = orientacion() ")" { if (reproducir){lookTo(o);} }
}

void TurnTo(Boolean reproducir):
{
  String d;
}
{
  < TURNTO > "(" d = direccion() ")" { if (reproducir) { veerTurn(d); } }
}

void Leap(Boolean reproducir):
{
  Integer x;
  Integer y;
}
{
  < LEAP > "(" x = numOVar() "," y = numOVar() ")" {if (reproducir) { world.setPostion(x, y); } }
}
void jump(Boolean reproducir):
{
  Integer numero;
}
{
  < JUMP > "(" numero = numOVar() ")" {if (reproducir) { world.moveForward(numero, true); }}
}


void assignment(Boolean reproducir) throws Exception:
{
  String nombreVar = "";
  Integer valorAsig;
}
{
  nombreVar = name() < ASSIGN > valorAsig = num()
  {
    if (reproducir)
    { 
	    if (!variables.containsKey(nombreVar))
	    {
	      throw new ParseException("Variable no registrada");
	    }
	    else
	    {
	      variables.put(nombreVar, valorAsig);
	    }
  	}
  }
}

void walk(Boolean reproducir) throws Exception:
{
  Integer numero;
  Integer orientacion;
  String direccion;
}
{
  < WALK > "(" ( (numero = numOVar() { if(reproducir) {world.moveForward(numero, false);} })
  | direccion = direccion() ","  numero = numOVar(){ if(reproducir) {movDir(direccion, numero);} }
  | orientacion = orientacion() "," numero = numOVar() { if(reproducir){movOri(orientacion, numero);} }) ")"
  
}


Integer orientacion():
{
  Integer resultado;
}
{
  < SOUTH > { resultado = 1; return resultado;}
  | < NORTH > { resultado = 0; return resultado;}
  | < EAST > { resultado = 2; return resultado;}
  | < WEST > { resultado = 3; return resultado;}

}

String direccion():
{
  String resultado;
}
{
  < FRONT > {resultado = token.image; return resultado;}
  | < RIGHT > {resultado = token.image; return resultado;}
  | < BACK > {resultado = token.image; return resultado;}
  | < LEFT > {resultado = token.image; return resultado;}
  | < AROUND > {resultado = token.image; return resultado;}
  
}

int numOVar():
{	
	int total=1;
}
{
  <NUM>
  {
    try
    {
      total = Integer.parseInt(token.image);
    }
    catch (NumberFormatException ee)
    {
      throw new Error("Number out of bounds: "+token.image+" !!");
    }
    return total;
  }
  | < NAME >
  {
    String nombreVariable = token.image;
    total = variables.get(nombreVariable);
    return total;
  }
}

int num() throws Error:
{	
	int total=1;
}
{
  <NUM>
  {
    try 
	{
	  total = Integer.parseInt(token.image);
	}
	catch (NumberFormatException ee) 
	{
	  throw new Error("Number out of bounds: "+token.image+" !!");
	}
	return total; }
}