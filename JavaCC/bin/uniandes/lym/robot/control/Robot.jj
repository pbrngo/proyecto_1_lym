/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=4; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
	
	HashMap<String, Integer> variables = new HashMap<String, Integer>();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| 	"\n"
}

TOKEN: /* Definiciones */
{
			<DEFV: "defVar">
		|	<DEFP: "defProc">
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >		

}

TOKEN: /* Sintaxis */
{
			< OB : "{">
		|	< CB : "}">
		|	< SC : ";">
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		|	<NAME: (<LETTER>)+ >
		|	<#LETTER: ["a"-"z"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		String salida = "OK";
	}
	{
		(defVar() | defProc() | block() | simpleCommand()
		{
		    try {
	    			 	Thread.sleep(900);
	    			 	sistema.printOutput(salida);
						return true;
	    	    } catch (InterruptedException e) {
	    			System.err.format("IOException: %s%n", e);
	    		}
		})

    	| <EOF> {return false;} 
	}

	void defVar() :
	{
		Token token;
		String name;
		int i;
	}
	{
		<DEFV> token=<NAME> {name = token.image;} i = num() {variables.put(name, i);}
	}
	
	void var() :
	{Token nombre;}
	{
		nombre = <NAME> {variables.keySet().contains(nombre.image);}
	}
	
	void defProc() :
	{}
	{
	 	 <DEFP> <NAME> "(" ( <NAME> ("," <NAME>)* )? ")" block()
	}
	
	void block() :
	{}
	{
		<OB> simpleCommand() (<SC> simpleCommand())* <CB>
	}
	
	void simpleCommand() :
	{	int x,y;
		String salida = new String();
		ArrayList<String> intrucciones = new ArrayList<String>();
	}
	{
		(
		   	<RIGHT> "(" ")" {world.turnRight(); salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false); salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true); salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num() ")" {world.setPostion(x,y); salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" pick()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		)
	}
	
	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void pick() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	